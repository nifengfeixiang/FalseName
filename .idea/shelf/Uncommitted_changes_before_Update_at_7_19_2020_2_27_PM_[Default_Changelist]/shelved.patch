Index: MultiMinded.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import DataPre as dp\r\nimport numpy as np\r\nimport copy\r\nimport math\r\n\r\n\r\n# 就算某个任务集合的总体价值；\r\ndef setValueCompute(taskSet, set):\r\n    value = 0\r\n    if (len(set) == 0):\r\n        return 0\r\n    else:\r\n        for item in set:\r\n            value = value + taskSet[item]\r\n        return value\r\n\r\n\r\n# # 得到每个user的任务集合的字典\r\n# def userSetDictCompute(userTaskSet, totalUserNum, totalTaskNum):\r\n#     userSetDict = {}\r\n#     for i in range(totalUserNum):\r\n#         tempSet = set()\r\n#         for j in range(totalTaskNum):\r\n#             if (userTaskSet[j][i] == 1):\r\n#                 tempSet.add(j)\r\n#         userSetDict[i] = tempSet\r\n#     return userSetDict\r\n#\r\n#\r\n# # 计算user集合的除去空集的所有子集的字典表示，用list表示所有的子集\r\n# def userSetSubsetDictCompute(userSetDict, totalUserNum):\r\n#     userSetSubsetDict = {}\r\n#     for user in range(totalUserNum):\r\n#         items = list(userSetDict[user])\r\n#         # generate all combination of N items\r\n#         N = len(items)\r\n#         # enumerate the 2**N possible combinations\r\n#         set_all = []\r\n#         for i in range(2 ** N):\r\n#             combo = []\r\n#             for j in range(N):\r\n#                 if (i >> j) % 2 == 1:\r\n#                     combo.append(items[j])\r\n#             set_all.append(combo)\r\n#         userSetSubsetDict[user] = set_all\r\n#     return userSetSubsetDict\r\n\r\n\r\n# 计算每个user子集的payment，同时确定收益最大的子集\r\ndef userPaymentDetermination(taskSet, userCost, totalUserNum, userSetSubsetDict):\r\n    # 初始化A_i,p_i\r\n    userA = {}\r\n    userP = {}\r\n    for user in range(totalUserNum):\r\n        p_i = 0\r\n        utility = 0\r\n        A_i = set()\r\n        subsetList = userSetSubsetDict[user]\r\n        for userItem in subsetList:\r\n            V_item = setValueCompute(taskSet, userItem)\r\n            user_set = set(userItem)\r\n            #得到user某个子集的cost\r\n            userItem_cost = userCost[user] * len(user_set)\r\n            # 遍历其他user\r\n            tempMax = 0\r\n            for otherUser in range(totalUserNum):\r\n                if (otherUser != user):\r\n                    # 遍历这个用户的所有子集；\r\n                    for otherUserItem in userSetSubsetDict[otherUser]:\r\n                        otheruser_set = set(otherUserItem)\r\n                        if (len(user_set & otheruser_set) != 0):\r\n                            tempMax = max(tempMax, setValueCompute(taskSet, otheruser_set) - userCost[otherUser] * len(\r\n                                otheruser_set))\r\n            p_i_userItem = V_item - max(0, tempMax)\r\n            if (p_i_userItem - userItem_cost > utility):\r\n                A_i = user_set\r\n                p_i = p_i_userItem\r\n        userA[user] = A_i\r\n        userP[user] = p_i\r\n    return userA, userP\r\n\r\n\r\n# Multi-minded 算法主体\r\ndef MultiMindedAlg(B, taskSet, userCost,  totalUserNum,userSetDict, userSetSubsetDict):\r\n    # 计算所有的user的payment\r\n    # userSetDict = userSetDictCompute(userTaskSet, totalUserNum, totalTaskNum)\r\n    # userSetSubsetDict = userSetSubsetDictCompute(userSetDict, totalUserNum)\r\n    userA, userP = userPaymentDetermination(taskSet, userCost, totalUserNum, userSetSubsetDict)\r\n\r\n    # 将所有user的备用A_i按照价值排序\r\n    userA_iSetValue = {}\r\n    for user in range(totalUserNum):\r\n        task_set = userA[user]\r\n        value = setValueCompute(taskSet, task_set)\r\n        userA_iSetValue[user] = value\r\n\r\n    # 首先将所有的user的A_i task value 排序；\r\n    items = userA_iSetValue.items()\r\n    backitems = [[v[1], v[0]] for v in items]\r\n    backitems.sort(reverse=True)\r\n    A_iValuesortList = [backitems[i][1] for i in range(0, len(backitems))]\r\n    # print(\"value排序序列：\", sortList, \"\\n\")\r\n\r\n    # winner selection\r\n    # 首先将所有的有效的user的 task value计算；\r\n    userSetValue={}\r\n    for user in range(totalUserNum):\r\n        task_set = userSetDict[user]\r\n        value = setValueCompute(taskSet, task_set)\r\n        userSetValue[user]=value\r\n\r\n\r\n    # 首先将所有的user的 task value 排序；\r\n    items = userSetValue.items()\r\n    backitems = [[v[1], v[0]] for v in items]\r\n    backitems.sort(reverse=True)\r\n    sortList = [backitems[i][1] for i in range(0, len(backitems))]\r\n    # print(\"value排序序列：\", sortList, \"\\n\")\r\n\r\n    # 按照序列进行选择winner\r\n    R=set()\r\n    totalPayment = 0\r\n    totalUtility=0\r\n    S_w = set()\r\n    for i in sortList:\r\n        if (userP[i] + totalPayment <= B ):\r\n            if(userP[i]!=0):\r\n                S_w.add(i)\r\n                # print(\"选择winner：\",i)\r\n                # print(\"分配的任务集以及费用：\", userA[i],userP[i],\"\\n\")\r\n                totalPayment = totalPayment + userP[i]\r\n                totalUtility=totalUtility+userP[i]-len(userA[i])*userCost[i]\r\n                R=R|userA[i]\r\n        else:\r\n            userA[i] = set()\r\n            B = 0\r\n    finalValue=setValueCompute(taskSet,R)\r\n\r\n\r\n    return round(totalPayment,2), finalValue, S_w, round(totalUtility/totalUserNum,2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    budget = 100\r\n    totalTaskNum = 150\r\n    taskValueDis = 20\r\n    totalUserNum = 300\r\n    userCosPerValueDis = 10\r\n    userTaskNumDis = 5\r\n    # budget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis = InitialSetting(20, 20, 30,10, 2.5, 4)\r\n\r\n    Data = dp.DataGenerate(budget,totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis)\r\n    # taskSet = TaskSet(totalTaskNum, taskValueDis)\r\n    taskSet = Data.TaskSet()\r\n    # userTaskSet, userCost = UserSet(totalUserNum, userCosPerValueDis, userTaskNumDis, taskSet)\r\n    userTaskSet, userCost = Data.UserTaskSet()\r\n    userSetDict= Data.userSetDictCompute(userTaskSet)\r\n    userSetSubsetDict=Data.userSetSubsetDictCompute(userSetDict)\r\n\r\n    # u_w, R, p, totalValue = SM(budget, taskSet, userTaskSet, userCost)\r\n    userPayment, finalValue, S_w ,averageUtility= MultiMindedAlg(budget, taskSet, userCost,  totalUserNum,userSetDict, userSetSubsetDict)\r\n\r\n    # print(\"taskSet:\", taskSet, \"\\n\")\r\n    # print(\"userTaskSet:\", userTaskSet, \"\\n\")\r\n    # print(\"userCost:\", userCost, \"\\n\")\r\n    print(\"Winner:\", S_w, \"\\n\")\r\n    print(\"Total value:\", finalValue)\r\n    print(\"Payment\", userPayment)\r\n    print(\"averageUtility\", averageUtility)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- MultiMinded.py	(revision 8b7dd6512ee8aed3349343b622440691cd9b7359)
+++ MultiMinded.py	(date 1594455345214)
@@ -2,7 +2,7 @@
 import numpy as np
 import copy
 import math
-
+from numba import jit
 
 # 就算某个任务集合的总体价值；
 def setValueCompute(taskSet, set):
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import DataPre as dp\r\nimport MultiMinded as MM\r\nimport SingleMinded as SM\r\nimport GreedyMech as GM\r\nimport numpy as np\r\nimport copy\r\nimport matplotlib.pyplot as plt\r\nimport pylab as pl\r\nimport math\r\n\r\ndef controlUser(budget, taskSet, userCost, userTaskSet, totalTaskNum, indexUserNum, userTaskNumDis, userSetDict,\r\n                userSetSubsetDict):\r\n    initUser = 20\r\n    x_1 = np.array([])\r\n    y_1 = np.array([])\r\n    y_2 = np.array([])\r\n    y_3 = np.array([])\r\n    Y_1 = np.array([])\r\n    Y_2 = np.array([])\r\n    # 从50到800\r\n    for i in range(indexUserNum):\r\n        num = 40 + i * initUser\r\n        print(\"user 数量为：:\", num)\r\n        userCostTemp_1 = userCost[:num]\r\n        userTaskSetTemp_1 = userTaskSet\r\n\r\n        userPayment_SM, finalValue_SM, S_w_SM, averageUtility_SM = SM.SingleMindedAlg(budget/2 , taskSet,\r\n                                                                                      userCostTemp_1,\r\n                                                                                      userTaskSetTemp_1,\r\n                                                                                      totalTaskNum, num,\r\n                                                                                      userTaskNumDis)\r\n        print(\"SM总价值：\", finalValue_SM, \"SM平均收益：\", averageUtility_SM)\r\n        # userCostTemp_2 = userCost[:num]\r\n        # userTaskSetTemp_2 = userTaskSet[:, :num]\r\n        userPayment_MM, finalValue_MM, S_w_MM, averageUtility_MM = MM.MultiMindedAlg(budget, taskSet, userCost, num,\r\n                                                                                     userSetDict, userSetSubsetDict)\r\n        print(\"MM总价值：\", finalValue_MM, \"MM平均收益：\", averageUtility_MM)\r\n\r\n        userCostTemp_3 = userCost[:num]\r\n        userTaskSetTemp_3 = userTaskSet[:, :num]\r\n        userPayment_GM, finalValue_GM, S_w_GM, averageUtility_GM = GM.GreedyAlgSM(budget, taskSet, userCostTemp_3,\r\n                                                                                  userTaskSetTemp_3, totalTaskNum,\r\n                                                                                  num)\r\n        print(\"GM总价值：\", finalValue_GM, \"GM平均收益：\", averageUtility_GM, \"\\n\")\r\n\r\n        x_1 = np.append(x_1, np.array([num]))\r\n        y_1 = np.append(y_1, np.array([finalValue_SM]))\r\n        y_2 = np.append(y_2, np.array([finalValue_MM]))\r\n        y_3 = np.append(y_3, np.array([finalValue_GM]))\r\n        Y_1 = np.append(Y_1, np.array([averageUtility_SM]))\r\n        Y_2 = np.append(Y_2, np.array([averageUtility_MM]))\r\n    return x_1, y_1, y_2, y_3, Y_1, Y_2\r\n\r\n\r\n\r\ndef doControlUser(reNum, budget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis):\r\n    # user 考虑的组数(user 考虑100-300，每次增加20)\r\n    indexUserNum = int(((totalUserNum - 40) / 20) + 1)\r\n    SM_platformUtility_1, SM_platformUtility_2, MM_platformUtility_2, GM_platformUtility_2, \\\r\n    SM_averageUtility_2, MM_averageUtility_2 = np.zeros((indexUserNum,),\r\n                                                        dtype=np.float), np.zeros(\r\n        (indexUserNum,), dtype=np.float), np.zeros((indexUserNum,), dtype=np.float), np.zeros((indexUserNum,),\r\n                                                                                              dtype=np.float), np.zeros(\r\n        (indexUserNum,), dtype=np.float), np.zeros((indexUserNum,),\r\n                                                   dtype=np.float)\r\n    # 总共执行reNum组随机数据然后去平均值画图\r\n    for i in range(reNum):\r\n        Data = dp.DataGenerate(budget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis)\r\n        # taskSet = TaskSet(totalTaskNum, taskValueDis)\r\n        taskSet = Data.TaskSet()\r\n        # userTaskSet, userCost = UserSet(totalUserNum, userCosPerValueDis, userTaskNumDis, taskSet)\r\n        userTaskSet, userCost = Data.UserTaskSet()\r\n        # u_w, R, p, totalValue = SM(budget, taskSet, userTaskSet, userCost)\r\n\r\n        userSetDict = Data.userSetDictCompute(userTaskSet)\r\n        userSetSubsetDict = Data.userSetSubsetDictCompute(userSetDict)\r\n        # 控制user数量的图\r\n        SM_pu_1, SM_pu_2, MM_pu_2, GM_pu_2, SM_au_2, MM_au_2 = controlUser(budget,\r\n                                                                           taskSet,\r\n                                                                           userCost,\r\n                                                                           userTaskSet,\r\n                                                                           totalTaskNum,\r\n                                                                           indexUserNum,\r\n                                                                           userTaskNumDis, userSetDict,\r\n                                                                           userSetSubsetDict)\r\n\r\n        # print(\"GM_pu_1\", GM_pu_1, \"\\n\")\r\n        # print(\"GM_platformUtility_1\", GM_platformUtility_1, \"\\n\")\r\n\r\n        SM_platformUtility_1 = SM_platformUtility_1 + SM_pu_1\r\n        SM_platformUtility_2 = SM_platformUtility_2 + SM_pu_2\r\n        MM_platformUtility_2 = MM_platformUtility_2 + MM_pu_2\r\n        GM_platformUtility_2 = GM_platformUtility_2 + GM_pu_2\r\n        SM_averageUtility_2 = SM_averageUtility_2 + SM_au_2\r\n        MM_averageUtility_2 = MM_averageUtility_2 + MM_au_2\r\n\r\n        # print(SM_platformUtility_1,SM_platformUtility_2,MM_platformUtility_1,MM_platformUtility_2,SM_averageUtility_1,SM_averageUtility_2,MM_averageUtility_1,MM_averageUtility_2)\r\n    # for i in range(indexUserNum):\r\n    #     SM_platformUtility_2[i]=math.log(SM_platformUtility_2[i]/reNum,10)\r\n    #     MM_platformUtility_2[i] = math.log(MM_platformUtility_2[i] / reNum, 10)\r\n    #     GM_platformUtility_2[i] = math.log(GM_platformUtility_2[i] / reNum, 10)\r\n    # 画图-platformUtility\r\n    plt.figure()\r\n    # plt.plot(SM_platformUtility_1 / reNum, math.log(SM_platformUtility_2 / reNum,10), 'r', marker='x',\r\n    #          label='SPBF-SM')  # use pylab to plot x and y : Give your plots names\r\n    # plt.plot(SM_platformUtility_1 / reNum, math.log(MM_platformUtility_2/ reNum,10), 'g', marker='.', label='SPBF-MM')\r\n    # plt.plot(SM_platformUtility_1 / reNum, math.log(GM_platformUtility_2 / reNum,10), 'b', marker='*', label='GM-SM')\r\n\r\n    plt.plot(SM_platformUtility_1/reNum, SM_platformUtility_2/reNum , 'r', marker='x',\r\n             label='SPBF-SM')  # use pylab to plot x and y : Give your plots names\r\n    plt.plot(SM_platformUtility_1/reNum , MM_platformUtility_2 /reNum, 'g', marker='.', label='SPBF-MM')\r\n    plt.plot(SM_platformUtility_1/reNum , GM_platformUtility_2/reNum , 'b', marker='*', label='GM-SM')\r\n\r\n    plt.title('Impact of users')  # give plot a title\r\n    plt.xlabel('Number of users')  # make axis labels\r\n    plt.ylabel('Platform Utility')\r\n\r\n    # pl.xlim(10.0, 35.0)  # set axis limits\r\n    # pl.ylim(35.0, 50.0)\r\n    plt.legend()\r\n    plt.savefig(\"platformUtility_users.pdf\")\r\n    plt.show()  # show the plot on the screen\r\n\r\n    # 画图-averageUtility\r\n    plt.figure()\r\n    plt.plot(SM_platformUtility_1 / reNum, SM_averageUtility_2 / reNum, 'r', marker='x',\r\n             label='SM')  # use pylab to plot x and y : Give your plots names\r\n    plt.plot(SM_platformUtility_1 / reNum, MM_averageUtility_2 / reNum, 'g', marker='.', label='MM')\r\n\r\n    plt.title('Impact of users')  # give plot a title\r\n    plt.xlabel('Number of users')  # make axis labels\r\n    plt.ylabel('Average Utility')\r\n\r\n    # pl.xlim(10.0, 35.0)  # set axis limits\r\n    # pl.ylim(35.0, 50.0)\r\n    plt.legend()\r\n    plt.savefig(\"avgUtility_users.pdf\")\r\n    plt.show()  # show the plot on the screen\r\n\r\n\r\ndef controlTask(budget, indexUserNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis):\r\n    initTask = 20\r\n    x_1 = np.array([])\r\n    y_1 = np.array([])\r\n    y_2 = np.array([])\r\n    y_3 = np.array([])\r\n    Y_1 = np.array([])\r\n    Y_2 = np.array([])\r\n    # 从20到60\r\n    for i in range(indexUserNum):\r\n        totalTaskNum = 20 + i * initTask\r\n        print(\"task 数量为：:\", totalTaskNum)\r\n\r\n        Data = dp.DataGenerate(budget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis)\r\n        # taskSet = TaskSet(totalTaskNum, taskValueDis)\r\n        taskSet = Data.TaskSet()\r\n        # userTaskSet, userCost = UserSet(totalUserNum, userCosPerValueDis, userTaskNumDis, taskSet)\r\n        userTaskSet, userCost = Data.UserTaskSet()\r\n        # u_w, R, p, totalValue = SM(budget, taskSet, userTaskSet, userCost)\r\n\r\n        userSetDict = Data.userSetDictCompute(userTaskSet)\r\n        userSetSubsetDict = Data.userSetSubsetDictCompute(userSetDict)\r\n\r\n        userPayment_SM, finalValue_SM, S_w_SM, averageUtility_SM = SM.SingleMindedAlg(budget / 2, taskSet,\r\n                                                                                      userCost,\r\n                                                                                      userTaskSet,\r\n                                                                                      totalTaskNum, totalUserNum,\r\n                                                                                      userTaskNumDis)\r\n        print(\"SM总价值：\", finalValue_SM, \"SM平均收益：\", averageUtility_SM)\r\n\r\n        userPayment_MM, finalValue_MM, S_w_MM, averageUtility_MM = MM.MultiMindedAlg(budget, taskSet, userCost,\r\n                                                                                     totalUserNum,\r\n                                                                                     userSetDict, userSetSubsetDict)\r\n        print(\"MM总价值：\", finalValue_MM, \"MM平均收益：\", averageUtility_MM)\r\n\r\n        userPayment_GM, finalValue_GM, S_w_GM, averageUtility_GM = GM.GreedyAlgSM(budget, taskSet, userCost,\r\n                                                                                  userTaskSet, totalTaskNum,\r\n                                                                                  totalUserNum)\r\n        print(\"GM总价值：\", finalValue_GM, \"GM平均收益：\", averageUtility_GM, \"\\n\")\r\n\r\n        x_1 = np.append(x_1, np.array([totalTaskNum]))\r\n        y_1 = np.append(y_1, np.array([finalValue_SM]))\r\n        y_2 = np.append(y_2, np.array([finalValue_MM]))\r\n        y_3 = np.append(y_3, np.array([finalValue_GM]))\r\n        Y_1 = np.append(Y_1, np.array([averageUtility_SM]))\r\n        Y_2 = np.append(Y_2, np.array([averageUtility_MM]))\r\n    return x_1, y_1, y_2, y_3, Y_1, Y_2\r\n\r\n\r\ndef doControlTask(reNum, budget, maxTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis):\r\n    # 初始设置参数\r\n    # task 考虑的组数(user 考虑40-100，每次增加10)\r\n    indexTaskNum = int(((maxTaskNum - 40) / 20) + 1)\r\n    SM_platformUtility_1, SM_platformUtility_2, MM_platformUtility_2, GM_platformUtility_2, \\\r\n    SM_averageUtility_2, MM_averageUtility_2 = np.zeros((indexTaskNum,),\r\n                                                        dtype=np.float), np.zeros(\r\n        (indexTaskNum,), dtype=np.float), np.zeros((indexTaskNum,), dtype=np.float), np.zeros((indexTaskNum,),\r\n                                                                                              dtype=np.float), np.zeros(\r\n        (indexTaskNum,), dtype=np.float), np.zeros((indexTaskNum,),\r\n                                                   dtype=np.float)\r\n    # 执行并画图\r\n    for i in range(reNum):\r\n        # 控制user数量的图\r\n        SM_pu_1, SM_pu_2, MM_pu_2, GM_pu_2, SM_au_2, MM_au_2 = controlTask(budget, indexTaskNum, taskValueDis,\r\n                                                                           totalUserNum, userCosPerValueDis,\r\n                                                                           userTaskNumDis)\r\n\r\n        # print(\"GM_pu_1\", GM_pu_1, \"\\n\")\r\n        # print(\"GM_platformUtility_1\", GM_platformUtility_1, \"\\n\")\r\n\r\n        SM_platformUtility_1 = SM_platformUtility_1 + SM_pu_1\r\n        SM_platformUtility_2 = SM_platformUtility_2 + SM_pu_2\r\n        MM_platformUtility_2 = MM_platformUtility_2 + MM_pu_2\r\n        GM_platformUtility_2 = GM_platformUtility_2 + GM_pu_2\r\n        SM_averageUtility_2 = SM_averageUtility_2 + SM_au_2\r\n        MM_averageUtility_2 = MM_averageUtility_2 + MM_au_2\r\n\r\n        # print(SM_platformUtility_1,SM_platformUtility_2,MM_platformUtility_1,MM_platformUtility_2,SM_averageUtility_1,SM_averageUtility_2,MM_averageUtility_1,MM_averageUtility_2)\r\n\r\n    # 画图-platformUtility\r\n    plt.figure()\r\n    plt.plot(SM_platformUtility_1 / reNum, SM_platformUtility_2 / reNum, 'r', marker='x',\r\n             label='SPBF-SM')  # use pylab to plot x and y : Give your plots names\r\n    plt.plot(SM_platformUtility_1 / reNum, MM_platformUtility_2 / reNum, 'g', marker='.', label='SPBF-MM')\r\n    plt.plot(SM_platformUtility_1 / reNum, GM_platformUtility_2 / reNum, 'b', marker='*', label='GM-SM')\r\n\r\n    plt.title('Impact of Tasks')  # give plot a title\r\n    plt.xlabel('Number of Tasks')  # make axis labels\r\n    plt.ylabel('Platform Utility')\r\n\r\n    # pl.xlim(10.0, 35.0)  # set axis limits\r\n    # pl.ylim(35.0, 50.0)\r\n    plt.legend()\r\n    plt.savefig(\"platformUtility_tasks.pdf\")\r\n    plt.show()  # show the plot on the screen\r\n\r\n    # 画图-averageUtility\r\n    plt.figure()\r\n    plt.plot(SM_platformUtility_1 / reNum, SM_averageUtility_2 / reNum, 'r', marker='x',\r\n             label='SM')  # use pylab to plot x and y : Give your plots names\r\n    plt.plot(SM_platformUtility_1 / reNum, MM_averageUtility_2 / reNum, 'g', marker='.', label='MM')\r\n\r\n    plt.title('Impact of Tasks')  # give plot a title\r\n    plt.xlabel('Number of Tasks')  # make axis labels\r\n    plt.ylabel('Average Utility')\r\n\r\n    # pl.xlim(10.0, 35.0)  # set axis limits\r\n    # pl.ylim(35.0, 50.0)\r\n    plt.legend()\r\n    plt.savefig(\"avgUtility_tasks.pdf\")\r\n    plt.show()  # show the plot on the screen\r\n\r\n\r\ndef controlBudget(indexBudget, taskSet, userCost, userTaskSet, totalTaskNum, totalUserNum, userTaskNumDis, userSetDict,\r\n                  userSetSubsetDict):\r\n    initUser = 40\r\n    x_1 = np.array([])\r\n    y_1 = np.array([])\r\n    y_2 = np.array([])\r\n    y_3 = np.array([])\r\n    Y_1 = np.array([])\r\n    Y_2 = np.array([])\r\n    # 从50到800\r\n    for i in range(indexBudget):\r\n        budget = 40 + i * initUser\r\n        print(\"budget为:\", budget)\r\n\r\n        userPayment_SM, finalValue_SM, S_w_SM, averageUtility_SM = SM.SingleMindedAlg(budget / 2, taskSet,\r\n                                                                                      userCost,\r\n                                                                                      userTaskSet,\r\n                                                                                      totalTaskNum, totalUserNum,\r\n                                                                                      userTaskNumDis)\r\n        print(\"SM总价值：\", finalValue_SM, \"SM平均收益：\", averageUtility_SM)\r\n        # userCostTemp_2 = userCost[:num]\r\n        # userTaskSetTemp_2 = userTaskSet[:, :num]\r\n        userPayment_MM, finalValue_MM, S_w_MM, averageUtility_MM = MM.MultiMindedAlg(budget, taskSet, userCost,\r\n                                                                                     totalUserNum,\r\n                                                                                     userSetDict, userSetSubsetDict)\r\n        print(\"MM总价值：\", finalValue_MM, \"MM平均收益：\", averageUtility_MM)\r\n\r\n        userPayment_GM, finalValue_GM, S_w_GM, averageUtility_GM = GM.GreedyAlgSM(budget, taskSet, userCost,\r\n                                                                                  userTaskSet, totalTaskNum,\r\n                                                                                  totalUserNum)\r\n        print(\"GM总价值：\", finalValue_GM, \"GM平均收益：\", averageUtility_GM, \"\\n\")\r\n\r\n        x_1 = np.append(x_1, np.array([budget]))\r\n        y_1 = np.append(y_1, np.array([finalValue_SM]))\r\n        y_2 = np.append(y_2, np.array([finalValue_MM]))\r\n        y_3 = np.append(y_3, np.array([finalValue_GM]))\r\n        Y_1 = np.append(Y_1, np.array([averageUtility_SM]))\r\n        Y_2 = np.append(Y_2, np.array([averageUtility_MM]))\r\n    return x_1, y_1, y_2, y_3, Y_1, Y_2\r\n\r\n\r\ndef doControlBudget(reNum, maxBudget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis):\r\n    # user 考虑的组数(user 考虑100-300，每次增加20)\r\n    indexBudget = int(((maxBudget - 40) / 40) + 1)\r\n    SM_platformUtility_1, SM_platformUtility_2, MM_platformUtility_2, GM_platformUtility_2, \\\r\n    SM_averageUtility_2, MM_averageUtility_2 = np.zeros((indexBudget,),\r\n                                                        dtype=np.float), np.zeros(\r\n        (indexBudget,), dtype=np.float), np.zeros((indexBudget,), dtype=np.float), np.zeros((indexBudget,),\r\n                                                                                            dtype=np.float), np.zeros(\r\n        (indexBudget,), dtype=np.float), np.zeros((indexBudget,),\r\n                                                  dtype=np.float)\r\n    # 总共执行reNum组随机数据然后去平均值画图\r\n    for i in range(reNum):\r\n        print(\"------------------重复次数为-----------：\", i, \"\\n\")\r\n        Data = dp.DataGenerate(budget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis)\r\n        # taskSet = TaskSet(totalTaskNum, taskValueDis)\r\n        taskSet = Data.TaskSet()\r\n        # userTaskSet, userCost = UserSet(totalUserNum, userCosPerValueDis, userTaskNumDis, taskSet)\r\n        userTaskSet, userCost = Data.UserTaskSet()\r\n        # u_w, R, p, totalValue = SM(budget, taskSet, userTaskSet, userCost)\r\n\r\n        userSetDict = Data.userSetDictCompute(userTaskSet)\r\n        userSetSubsetDict = Data.userSetSubsetDictCompute(userSetDict)\r\n        # 控制user数量的图\r\n        SM_pu_1, SM_pu_2, MM_pu_2, GM_pu_2, SM_au_2, MM_au_2 = controlBudget(indexBudget, taskSet, userCost,\r\n                                                                             userTaskSet, totalTaskNum, totalUserNum,\r\n                                                                             userTaskNumDis, userSetDict,\r\n                                                                             userSetSubsetDict)\r\n\r\n        # print(\"GM_pu_1\", GM_pu_1, \"\\n\")\r\n        # print(\"GM_platformUtility_1\", GM_platformUtility_1, \"\\n\")\r\n\r\n        SM_platformUtility_1 = SM_platformUtility_1 + SM_pu_1\r\n        SM_platformUtility_2 = SM_platformUtility_2 + SM_pu_2\r\n        MM_platformUtility_2 = MM_platformUtility_2 + MM_pu_2\r\n        GM_platformUtility_2 = GM_platformUtility_2 + GM_pu_2\r\n        SM_averageUtility_2 = SM_averageUtility_2 + SM_au_2\r\n        MM_averageUtility_2 = MM_averageUtility_2 + MM_au_2\r\n\r\n        # print(SM_platformUtility_1,SM_platformUtility_2,MM_platformUtility_1,MM_platformUtility_2,SM_averageUtility_1,SM_averageUtility_2,MM_averageUtility_1,MM_averageUtility_2)\r\n\r\n    # 画图-platformUtility\r\n    plt.figure()\r\n    plt.plot(SM_platformUtility_1 / reNum, SM_platformUtility_2 / reNum, 'r', marker='x',\r\n             label='SPBF-SM')  # use pylab to plot x and y : Give your plots names\r\n    plt.plot(SM_platformUtility_1 / reNum, MM_platformUtility_2 / reNum, 'g', marker='.', label='SPBF-MM')\r\n    plt.plot(SM_platformUtility_1 / reNum, GM_platformUtility_2 / reNum, 'b', marker='*', label='GM-SM')\r\n\r\n    plt.title('Impact of budget')  # give plot a title\r\n    plt.xlabel('Budget')  # make axis labels\r\n    plt.ylabel('Platform Utility')\r\n\r\n    # pl.xlim(10.0, 35.0)  # set axis limits\r\n    # pl.ylim(35.0, 50.0)\r\n    plt.legend()\r\n    plt.savefig(\"platformUtility_budget.pdf\")\r\n    plt.show()  # show the plot on the screen\r\n\r\n    # 画图-averageUtility\r\n    plt.figure()\r\n    plt.plot(SM_platformUtility_1 / reNum, SM_averageUtility_2 / reNum, 'r', marker='x',\r\n             label='SM')  # use pylab to plot x and y : Give your plots names\r\n    plt.plot(SM_platformUtility_1 / reNum, MM_averageUtility_2 / reNum, 'g', marker='.', label='MM')\r\n\r\n    plt.title('Impact of budget')  # give plot a title\r\n    plt.xlabel('Budget')  # make axis labels\r\n    plt.ylabel('Average Utility')\r\n\r\n    # pl.xlim(10.0, 35.0)  # set axis limits\r\n    # pl.ylim(35.0, 50.0)\r\n    plt.legend()\r\n    plt.savefig(\"avgUtility_budget.pdf\")\r\n    plt.show()  # show the plot on the screen\r\n\r\n\r\nif __name__ == '__main__':\r\n    # 初始设置参数\r\n    reNum = 20\r\n    budget = 200\r\n    totalTaskNum = 150\r\n    taskValueDis = 5\r\n    totalUserNum =300\r\n    userCosPerValueDis = 10\r\n    userTaskNumDis = 5\r\n\r\n    doControlUser(reNum, budget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis)\r\n\r\n    # # 初始设置参数\r\n    # reNum = 50\r\n    # budget = 400\r\n    # totalTaskNum = 300\r\n    # taskValueDis = 5\r\n    # totalUserNum = 200\r\n    # userCosPerValueDis = 10\r\n    # userTaskNumDis = 5\r\n    # maxTaskNum = totalTaskNum\r\n    # doControlTask(reNum, budget, maxTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis)\r\n\r\n    # reNum = 50\r\n    # budget = 320\r\n    # totalTaskNum = 150\r\n    # taskValueDis = 5\r\n    # totalUserNum = 200\r\n    # userCosPerValueDis = 10\r\n    # userTaskNumDis = 5\r\n    #\r\n    # doControlBudget(reNum, budget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision 8b7dd6512ee8aed3349343b622440691cd9b7359)
+++ main.py	(date 1595042102014)
@@ -7,6 +7,8 @@
 import matplotlib.pyplot as plt
 import pylab as pl
 import math
+from numba import jit
+
 
 def controlUser(budget, taskSet, userCost, userTaskSet, totalTaskNum, indexUserNum, userTaskNumDis, userSetDict,
                 userSetSubsetDict):
@@ -294,7 +296,7 @@
 
 def doControlBudget(reNum, maxBudget, totalTaskNum, taskValueDis, totalUserNum, userCosPerValueDis, userTaskNumDis):
     # user 考虑的组数(user 考虑100-300，每次增加20)
-    indexBudget = int(((maxBudget - 40) / 40) + 1)
+    indexBudget = int(((maxBudget - 20) / 20) + 1)
     SM_platformUtility_1, SM_platformUtility_2, MM_platformUtility_2, GM_platformUtility_2, \
     SM_averageUtility_2, MM_averageUtility_2 = np.zeros((indexBudget,),
                                                         dtype=np.float), np.zeros(
